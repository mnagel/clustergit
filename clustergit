#! /usr/bin/env python

""" run git commands on multiple git clones https://github.com/mnagel/clustergit """

from __future__ import print_function
import re
import sys
import os
import subprocess

if os.name == 'nt':
    from ctypes import windll, c_ulong

try:
    from argcomplete import autocomplete
    use_argcomplete = True
except ImportError:
    use_argcomplete = False
    # print('Notice: install "argcomplete" to automatic complete the arguments')
try:
    from argparse import ArgumentParser
    import argparse
except ImportError:
    # python3
    from ArgParse import ArgumentParser
    import ArgParse


def colorize(color, message):
    return "%s%s%s" % (color, message, Colors.ENDC)


# noinspection PyUnusedLocal
def colorize_off(color, message):
    for color in Colors.ALL:
        message = message.replace(color, '')
    return message


# noinspection PyClassHasNoInit
class Colors:
    BOLD = '\033[1m'       # unused
    UNDERLINE = '\033[4m'  # unused
    HEADER = '\033[95m'    # unused
    OKBLUE = '\033[94m'    # write operation succeeded
    OKGREEN = '\033[92m'   # readonly operation succeeded
    OKPURPLE = '\033[95m'  # readonly (fetch) operation succeeded
    WARNING = '\033[93m'   # operation succeeded with non-default result
    FAIL = '\033[91m'      # operation did not succeed
    ENDC = '\033[0m'       # reset color
    
    # list of all colors
    ALL = [BOLD, UNDERLINE, HEADER, OKBLUE, OKGREEN, OKPURPLE, WARNING, FAIL, ENDC]
    
    # map from ASCII to Windows color text attribute
    WIN_DICT = {
        BOLD: 15,
        UNDERLINE: 15,
        HEADER: 15,
        OKBLUE: 11,
        OKGREEN: 10,
        WARNING: 14,
        FAIL: 12,
        ENDC: 15
    }


def write_color(out, color):
    # set text attribute for Windows and write ASCII color otherwise
    if os.name == 'nt' and out.isatty():
        windll.Kernel32.SetConsoleTextAttribute(
            windll.Kernel32.GetStdHandle(c_ulong(0xfffffff5)),
            Colors.WIN_DICT[color]
        )
    else:
        out.write(color)


def write_with_color(out, msg):
    # build regex for splitting by colors, split and iterate over elements
    for p in re.split(('(%s)' % '|'.join(Colors.ALL)).replace('[', '\['), msg):
        # check if element is a color
        if p in Colors.ALL:
            write_color(out, p)
        else:
            # plain text
            out.write(p)
            # flush required to properly apply color
            out.flush()


def read_arguments(args):
    parser = ArgumentParser(description="""
    clustergit will scan through all subdirectories looking for a .git directory.
    When it finds one it'll look to see if there are any changes and let you know.
    If there are no changes it can also push and pull to/from a remote location.
    """.strip(),
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("-d", "--dir",
                    dest    = "dirname",
                    action  = "store",
                    help    = "The directory to parse sub dirs from",
                    default = "."
                    )

    parser.add_argument("-v", "--verbose",
                  action    = "store_true",
                  dest      = "verbose",
                  default   = False,
                  help      = "Show the full detail of git status"
                  )

    parser.add_argument("-a", "--align",
                  action    = "store",
                  dest      = "align",
                  default   = 40,
                  type      = int,
                  help      = "Repo name align (space padding)"
                  )

    parser.add_argument("-r", "--remote",
                action      = "store",
                dest        = "remote",
                default     = "",
                help        = "Set the remote name (remotename:branchname)"
                )

    parser.add_argument("--push",
                action      = "store_true",
                dest        = "push",
                default     = False,
                help        = "Do a 'git push' if you've set a remote with -r it will push to there"
                )

    parser.add_argument("-p", "--pull",
                action      = "store_true",
                dest        = "pull",
                default     = False,
                help        = "Do a 'git pull' if you've set a remote with -r it will pull from there"
                )
    
    parser.add_argument("-f", "--fetch",
                action      = "store_true",
                dest        = "fetch",
                default     = False,
                help        = "Fetch each repository"
                )

    parser.add_argument("-f", "--fetch",
                action      = "store_true",
                dest        = "fetch",
                default     = False,
                help        = "Do a 'git fetch' if you've set a remote with -r it will fetch from there"
                )

    parser.add_argument("--exec", "--execute",
                action      = "store",
                dest        = "command",
                type        = str,
                default     = "",
                help        = "Execute a shell command in each repository"
                )

    parser.add_argument("-c", "--clear",
                action      = "store_true",
                dest        = "clear",
                default     = False,
                help        = "Clear screen on startup"
                )

    parser.add_argument("-C", "--count-dirty",
                action      = "store_true",
                dest        = "count",
                default     = False,
                help        = "Only display a count of not-clean repos"
                )

    parser.add_argument("-q", "--quiet",
                action      = "store_true",
                dest        = "quiet",
                default     = False,
                help        = "Skip startup info"
                )

    parser.add_argument("-H", "--hide-clean",
                action      = "store_true",
                dest        = "hide_clean",
                default     = False,
                help        = "Hide clean repos"
                )

    parser.add_argument("-R", "--relative",
                action      = "store_true",
                dest        = "relative",
                default     = False,
                help        = "Print relative paths"
                )

    parser.add_argument("-n", "--no-colors",
                action      = "store_false",
                dest        = "colors",
                default     = True,
                help        = "Disable ANSI color output. Disregard the alleged default -- color is on by default."
                )

    parser.add_argument("-b", "--branch",
                action      = "store",
                dest        = "branch",
                default     = "master",
                help        = "Warn if not on this branch. Set to empty string (-b '') to disable this feature."
                )

    parser.add_argument("--recursive",
                action      = "store_true",
                dest        = "recursive",
                default     = False,
                help        = "Recursively search for git repos"
                )

    parser.add_argument("--skip-symlinks",
                action    = "store_true",
                dest      = "skipSymLinks",
                default   = False,
                help      = "Skip symbolic links when searching for git repos"
                )

    parser.add_argument("-e", "--exclude",
                action      = "append",
                dest        = "exclude",
                default     = [],
                help        = "Regex to exclude directories"
                )

    parser.add_argument("-B", "--checkout-branch",
                action      = "store",
                dest        = "cbranch",
                default     = None,
                help        = "Checkout branch"
                )

    parser.add_argument("--warn-unversioned",
                action      = "store_true",
                dest        = "unversioned",
                default     = False,
                help        = "Prints a warning if a directory is not under git version control"
                )

    if use_argcomplete:
        autocomplete(parser)
    options = parser.parse_args(args)
    return options


def show_error(error="Undefined Error!"):
    """Writes an error to stderr"""
    write_with_color(sys.stderr, error)
    sys.exit(1)


def is_excluded(path, options):
    for ex in options.exclude:
        if re.search(ex, path):
            if options.verbose:
                print("skipping %s" % path)
            return True
    return False


def run(command, options):
    if options.verbose:
        print("running %s" % command)
    try:
        output = subprocess.check_output(command, shell=True)
        return 0, output
    except subprocess.CalledProcessError, e:
        return e.returncode, e.output


def check(dirname, options):
    """
    Check the subdirectories of a single directory.
    See if they are versioned in git and display the requested information.
    """
    gitted = False
    dirties = 0

    # See whats here
    files = os.listdir(dirname)
    files[:] = [f for f in files if not is_excluded(os.path.join(dirname, f), options)]
    files.sort()
    for infile in files:
        infile = os.path.join(dirname, infile)

        # is there a .clustergit-ignore file
        if os.path.exists(os.path.join(infile, ".clustergit-ignore")) :

            if options.verbose:
                print("skipping %s directory" % infile)

            # Ignore this folder and continue scanning
            continue

        # is there a .git file
        if os.path.exists(os.path.join(infile, ".git")):
            if options.skipSymLinks and os.path.islink(infile):
                if options.verbose:
                    print("skipping %s symbolic link" % infile)
                continue

            cmdprefix = 'cd "%s" &&' % infile
            if os.name != 'nt':
                cmdprefix = cmdprefix + ' LC_ALL=C'

            if options.verbose:
                sys.stdout.write("\n")
                sys.stdout.write("---------------- " + infile + " -----------------\n")

            # Yay, we found one!
            gitted = True

            # OK, contains a .git file. Let's descend into it
            # and ask git for a status
            status, out = run('%s git status' % cmdprefix, options)
            if options.verbose:
                sys.stdout.write(out + "\n")

            if options.relative:
                infile = os.path.relpath(infile, options.dirname)
            messages = []
            clean = True
            can_push = False
            can_pull = True
            if len(options.branch) > 0 and 'On branch ' + options.branch not in out:
                branch = out.splitlines()[0].replace("On branch ", "")
                messages.append(colorize(Colors.WARNING, "On branch %s" % branch))
                can_pull = False
                clean = False
            # changed from "directory" to "tree" in git 2.9.1
            # https://github.com/mnagel/clustergit/issues/18
            if re.search(r'nothing to commit.?.?working (directory|tree) clean.?', out):
                messages.append(colorize(Colors.OKBLUE, "No Changes"))
                can_push = True
            elif 'nothing added to commit but untracked files present' in out:
                messages.append(colorize(Colors.WARNING, "Untracked files"))
                can_push = True
                clean = False
            else:
                messages.append(colorize(Colors.FAIL, "Changes"))
                can_pull = False
                clean = False
            if 'Your branch is ahead of' in out:
                messages.append(colorize(Colors.FAIL, "Unpushed commits"))
                can_pull = False
                clean = False
            else:
                can_push = False

            if clean:
                if not options.hide_clean:
                    messages = [colorize(Colors.OKGREEN, "Clean")]
                else:
                    messages = []
            else:
                dirties += 1

            if can_push and options.push:
                # Push to the remote
                status, push = run(
                    '%s git push %s'
                    % (cmdprefix, ' '.join(options.remote.split(":"))), options
                )
                if options.verbose:
                    sys.stdout.write(push + "\n")
                if re.search(r'\[(remote )?rejected\]', push):
                    messages.append(colorize(Colors.FAIL, "Push rejected"))
                else:
                    messages.append(colorize(Colors.OKBLUE, "Pushed OK"))

            if can_pull and options.pull:
                # Pull from the remote
                status, pull = run(
                    '%s git pull %s'
                    % (cmdprefix, ' '.join(options.remote.split(":"))), options
                )
                if options.verbose:
                    sys.stdout.write(pull + "\n")
                if "Already up-to-date" in pull:
                    if not options.hide_clean:
                        messages.append(colorize(Colors.OKGREEN, "Pulled nothing"))
                elif "CONFLICT" in pull:
                    messages.append(colorize(Colors.FAIL, "Pull conflict"))
                elif "fatal: No remote repository specified." in pull:
                    messages.append(colorize(Colors.WARNING, "Pull remote not configured"))
                elif "fatal: " in pull:
                    messages.append(colorize(Colors.FAIL, "Pull fatal"))
                else:
                    messages.append(colorize(Colors.OKBLUE, "Pulled"))
            
            if options.fetch:
                # Fetch'em all
                status, fetch = run(
                    '%s git fetch %s'
                    % (cmdprefix, ' '.join(options.remote.split(":"))), options
                )
                if not options.quiet:
                    messages.append('\n' + fetch)
                    if status != 0:
                        msg = "The command exited with status {s} in {r}\nThe output was:{o}"
                        msg = msg.format(s=status, r=infile, o=fetch)
                        show_error(colorize(Colors.FAIL, msg))

            if options.fetch:
                # fetch from the remote
                # deal with [deleted] [new branch] and sha
                status, fetch = run(
                    '%s git fetch --all --prune %s'
                    % (cmdprefix, ' '.join(options.remote.split(":"))), options
                )
                if options.verbose:
                    sys.stdout.write(fetch + "\n")
                if "error: " in fetch:
                    messages.append(colorize(Colors.FAIL, "Fetch fatal"))
                else:
                    messages.append(colorize(Colors.OKPURPLE, "Fetched"))
                if status != 0:
                    messages.append(colorize(Colors.FAIL, "Fetch unsuccessful"))

            if options.command:
                exit_status, output = run(
                    '%s %s' % (cmdprefix, options.command),
                    options
                )
                if not options.colors:
                    output = colorize_off('', output)
                if not options.quiet:
                    messages.append('\n' + output)
                    if exit_status != 0:
                        msg = "The command exited with status {s} in {r}\nThe output was:{o}"
                        msg = msg.format(s=exit_status, r=infile, o=output)
                        show_error(colorize(Colors.FAIL, msg))

            if options.cbranch:
                status, checkoutbranch = run(
                    '%s git checkout %s'
                    % (cmdprefix, options.cbranch), options
                )
                if "Already on" in checkoutbranch:
                    if not options.hide_clean:
                        messages.append(colorize(Colors.OKGREEN, "No action"))
                elif "error: " in checkoutbranch:
                    messages.append(colorize(Colors.FAIL, "Checkout failed"))
                else:
                    messages.append(colorize(Colors.OKBLUE, "Checkout successful"))

            if not options.count and messages:
                sys.stdout.write(infile.ljust(options.align) + ": ")
                write_with_color(sys.stdout, ", ".join(messages) + "\n")
                sys.stdout.flush()

            # Come out of the dir and into the next
            run('cd ../', options)

            if options.verbose:
                sys.stdout.write("---------------- " + infile + " -----------------\n")
        elif options.unversioned and not infile.startswith("./.") and os.path.isdir(infile):
            sys.stdout.write(infile.ljust(options.align) + ": ")
            write_with_color(sys.stdout, colorize(Colors.WARNING, "Not a GIT repository") + "\n")
            sys.stdout.flush()
    return gitted, dirties


# -------------------
# Now, onto the main event!
# -------------------
def main(args):
    try:
        options = read_arguments(args)
        if options.clear:
            os.system('clear')

        if not options.quiet:
            sys.stdout.write('Starting git status...\n')
            sys.stdout.write('Scanning sub directories of %s\n' % options.dirname)

        if not options.colors:
            # noinspection PyGlobalUndefined
            global colorize
            colorize = colorize_off

        gitted = False
        dirties = 0

        for (path, dirs, files) in os.walk(options.dirname, topdown=True):
            new_gitted, new_dirties = check(path, options)
            gitted = gitted or new_gitted
            dirties += new_dirties
            if not options.recursive:
                break

        if not gitted:
            show_error("Error: None of those sub directories had a .git file.\n")

        if options.count:
            sys.stdout.write(str(dirties) + "\n")
        if dirties == 0 and options.hide_clean:
            sys.stdout.write("All repos clean\n")

        if not options.quiet:
            sys.stdout.write("Done\n")
    except (KeyboardInterrupt, SystemExit):
        sys.stdout.write("\n")

if __name__ == '__main__':
    main(sys.argv[1:])
